"""Create initial tables

Revision ID: a25826741177
Revises: 
Create Date: 2024-11-24 10:12:40.340068

"""
from typing import Sequence, Union

import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from src.schemas.common_schema import ConsumerEnum, ProviderEnum

# revision identifiers, used by Alembic.
revision: str = 'a25826741177'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('ai_models',
    sa.Column('provider', sqlalchemy_utils.types.choice.ChoiceType(ProviderEnum), nullable=False),
    sa.Column('title_public', sa.String(length=28), nullable=False),
    sa.Column('title_model', sa.String(length=28), nullable=False),
    sa.Column('api_key', sa.String(length=100), nullable=False),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('is_free', sa.Boolean(), nullable=False),
    sa.Column('incoming_price', sa.DECIMAL(precision=6, scale=2), nullable=False),
    sa.Column('outgoing_price', sa.DECIMAL(precision=6, scale=2), nullable=False),
    sa.Column('context_window', sa.Integer(), nullable=False),
    sa.Column('max_request_token', sa.Integer(), nullable=False),
    sa.Column('time_window', sa.Integer(), nullable=False),
    sa.Column('consumer', sqlalchemy_utils.types.choice.ChoiceType(ConsumerEnum), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ai_models_id'), 'ai_models', ['id'], unique=False)
    op.create_table('cities',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('subject', sa.String(length=255), nullable=False),
    sa.Column('district', sa.String(length=255), nullable=False),
    sa.Column('population', sa.Integer(), nullable=False),
    sa.Column('latitude', sa.Float(), nullable=False),
    sa.Column('longitude', sa.Float(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cities_name'), 'cities', ['name'], unique=False)
    op.create_table('gpt_prompts',
    sa.Column('title', sa.String(length=28), nullable=False),
    sa.Column('en_prompt_text', sa.Text(), nullable=False),
    sa.Column('ru_prompt_text', sa.Text(), nullable=False),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('consumer', sqlalchemy_utils.types.choice.ChoiceType(ConsumerEnum), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_gpt_prompts_id'), 'gpt_prompts', ['id'], unique=False)
    op.create_table('images',
    sa.Column('file', sa.String(), nullable=True),
    sa.Column('is_main', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_images_id'), 'images', ['id'], unique=False)
    op.create_table('tg_groups',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('chat_id', sa.BigInteger(), nullable=False),
    sa.Column('title', sa.String(), nullable=True),
    sa.Column('link', sa.String(), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tg_groups_chat_id'), 'tg_groups', ['chat_id'], unique=True)
    op.create_index(op.f('ix_tg_groups_id'), 'tg_groups', ['id'], unique=False)
    op.create_table('users',
    sa.Column('first_name', sa.String(), nullable=True),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('tg_id', sa.BigInteger(), nullable=True),
    sa.Column('tg_username', sa.String(), nullable=True),
    sa.Column('is_blocked_bot', sa.Boolean(), nullable=False),
    sa.Column('phone', sa.String(), nullable=True),
    sa.Column('email', sa.String(length=320), nullable=False),
    sa.Column('hashed_password', sa.String(length=1024), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_tg_id'), 'users', ['tg_id'], unique=True)
    op.create_table('approved_user_models',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('ai_model_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['ai_model_id'], ['ai_models.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'ai_model_id')
    )
    op.create_table('user_ai_models',
    sa.Column('id', sa.Uuid(), nullable=False),
    sa.Column('time_start', sa.DateTime(timezone=True), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('model_id', sa.UUID(), nullable=True),
    sa.Column('prompt_id', sa.UUID(), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['ai_models.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['prompt_id'], ['gpt_prompts.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id')
    )
    op.create_table('user_image_association',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('image_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['image_id'], ['images.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'image_id')
    )
    op.create_table('user_tg_group_association',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['tg_groups.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'group_id')
    )
    op.create_table('ai_transactions',
    sa.Column('chat_id', sa.String(length=128), nullable=True),
    sa.Column('question', sa.Text(), nullable=False),
    sa.Column('question_tokens', sa.Integer(), nullable=True),
    sa.Column('question_token_price', sa.DECIMAL(precision=6, scale=2), nullable=False),
    sa.Column('answer', sa.Text(), nullable=False),
    sa.Column('answer_tokens', sa.Integer(), nullable=True),
    sa.Column('answer_token_price', sa.DECIMAL(precision=6, scale=2), nullable=False),
    sa.Column('image', sa.String(), nullable=True),
    sa.Column('consumer', sqlalchemy_utils.types.choice.ChoiceType(ConsumerEnum), nullable=False),
    sa.Column('user_ai_model_id', sa.Uuid(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_ai_model_id'], ['user_ai_models.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_ai_transactions_id'), 'ai_transactions', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_ai_transactions_id'), table_name='ai_transactions')
    op.drop_table('ai_transactions')
    op.drop_table('user_tg_group_association')
    op.drop_table('user_image_association')
    op.drop_table('user_ai_models')
    op.drop_table('approved_user_models')
    op.drop_index(op.f('ix_users_tg_id'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_tg_groups_id'), table_name='tg_groups')
    op.drop_index(op.f('ix_tg_groups_chat_id'), table_name='tg_groups')
    op.drop_table('tg_groups')
    op.drop_index(op.f('ix_images_id'), table_name='images')
    op.drop_table('images')
    op.drop_index(op.f('ix_gpt_prompts_id'), table_name='gpt_prompts')
    op.drop_table('gpt_prompts')
    op.drop_index(op.f('ix_cities_name'), table_name='cities')
    op.drop_table('cities')
    op.drop_index(op.f('ix_ai_models_id'), table_name='ai_models')
    op.drop_table('ai_models')
    # ### end Alembic commands ###
