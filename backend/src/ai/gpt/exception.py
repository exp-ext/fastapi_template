import traceback


class LogTracebackExceptionError(Exception):
    """–ê–±—Å—Ç—Ä–∞–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è traceback."""
    def __init__(self, message, log_traceback=True):
        super().__init__(message)
        self.log_traceback = log_traceback


class InWorkError(LogTracebackExceptionError):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ, –≤—ã–∑—ã–≤–∞–µ–º–æ–µ, –µ—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–±–æ—Ç–µ."""
    pass


class LongQueryError(LogTracebackExceptionError):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π."""
    def __init__(self, message="–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∫–æ—Ä–æ—á–µ."):
        self.message = message
        super().__init__(self.message, log_traceback=False)


class LowTokensBalanceError(LogTracebackExceptionError):
    """–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤."""
    def __init__(self, message="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–π –ª–∏–º–∏—Ç."):
        self.message = message
        super().__init__(self.message, log_traceback=False)


class UnhandledError(LogTracebackExceptionError):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫."""
    pass


class OpenAIRequestError(LogTracebackExceptionError):
    """–û—à–∏–±–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ OpenAI."""
    pass


class OpenAIResponseError(OpenAIRequestError):
    """–û—à–∏–±–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –æ—Ç OpenAI."""
    pass


class OpenAIConnectionError(OpenAIRequestError):
    """–û—à–∏–±–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–∞—Ö –∫ OpenAI."""
    pass


class OpenAIJSONDecodeError(OpenAIRequestError):
    """–û—à–∏–±–∫–∏ –ø—Ä–∏ –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ OpenAI."""
    pass


class ValueChoicesError(OpenAIRequestError):
    """–û—à–∏–±–∫–∏ –≤ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞."""
    pass


async def handle_exceptions(err: Exception, include_traceback: bool = False) -> tuple[str, type, str]:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI.

    ### Args:
    - err (`Exception`): –û–±—ä–µ–∫—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
    - include_traceback (`bool`, optional): –§–ª–∞–≥ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏ –∏–∑ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–∑–æ–≤–∞.

    ### Returns:
    - tuple[`str`, `type`, `str`]: –ö–æ—Ä—Ç–µ–∂ —Å —Ç–µ–∫—Å—Ç–æ–º –æ—à–∏–±–∫–∏, —Ç–∏–ø–æ–º –æ—à–∏–±–∫–∏ –∏ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–æ–π.

    """
    user_error_text = '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ ü§∑üèº\n–í–æ–∑–º–æ–∂–Ω–æ –±–æ–ª—å—à–æ–π –Ω–∞–ø–ª—ã–≤ –∑–∞–ø—Ä–æ—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —è –Ω–µ —É—Å–ø–µ–≤–∞—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å ü§Ø'
    error_messages = {
        InWorkError: '–Ø –µ—â—ë –¥—É–º–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –≤–æ–ø—Ä–æ—Å–æ–º.',
        LongQueryError: '–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∫–æ—Ä–æ—á–µ.',  # TODO —Ç—É—Ç —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ –∫–∞–∫ –æ–∂–∏–¥–∞–µ—Ç—Å—è
        LowTokensBalanceError: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ —Å–≤–æ–π –ª–∏–º–∏—Ç.',  # TODO —Ç—É—Ç —Ç–æ–∂–µ
        ValueChoicesError: user_error_text,
        OpenAIResponseError: '–ü—Ä–æ–±–ª–µ–º–∞ –≤ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. –í–µ—Ä–æ—è—Ç–Ω–æ, –æ–Ω –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.',
        OpenAIConnectionError: '–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º... –ü–æ—Ö–æ–∂–µ, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –Ω–∞ –º–≥–Ω–æ–≤–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–∏–ª—Å—è.',
        OpenAIJSONDecodeError: user_error_text,
        UnhandledError: user_error_text,
    }

    error_message = error_messages.get(type(err), user_error_text)
    if isinstance(error_message, str):
        formatted_error_message = error_message
    else:
        formatted_error_message = error_message(err)

    include_traceback = include_traceback or (hasattr(err, 'log_traceback') and err.log_traceback)
    traceback_str = ''
    if include_traceback:
        traceback_str = f'\n\n–¢—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞:\n{traceback.format_exc()[-2048:]}'

    return formatted_error_message, type(err), traceback_str
